{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "df4cda9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sb\n",
    "import matplotlib.pyplot as plt\n",
    "import sklearn.model_selection as sk\n",
    "sb.set()\n",
    "from sklearn import preprocessing\n",
    "plt.rc(\"font\", size=14)\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "sb.set(style=\"white\")\n",
    "sb.set(style=\"whitegrid\", color_codes=True)\n",
    "from imblearn.over_sampling import SMOTE\n",
    "import statsmodels.api as sm\n",
    "import math\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "89ea02a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "googleplayclean =  pd.read_csv('C:/Users/davyn/Downloads/googleplayclean.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "c358aa07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(182502, 14)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googleplayclean.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "d8e09b52",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Puzzle          29946\n",
       "Arcade          29177\n",
       "Casual          27532\n",
       "Simulation      18190\n",
       "Action          17094\n",
       "Adventure       14994\n",
       "Role Playing     7758\n",
       "Racing           7147\n",
       "Trivia           6992\n",
       "Board            6789\n",
       "Strategy         5670\n",
       "Card             5618\n",
       "Word             5595\n",
       "Name: Category, dtype: int64"
      ]
     },
     "execution_count": 141,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "googleplayclean['Category'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "df1a02f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 182502 entries, 0 to 182501\n",
      "Data columns (total 14 columns):\n",
      " #   Column            Non-Null Count   Dtype  \n",
      "---  ------            --------------   -----  \n",
      " 0   Unnamed: 0        182502 non-null  int64  \n",
      " 1   Category          182502 non-null  object \n",
      " 2   Rating            182502 non-null  object \n",
      " 3   Rating Count      182502 non-null  float64\n",
      " 4   Installs          182502 non-null  object \n",
      " 5   Free              182502 non-null  bool   \n",
      " 6   Price             182502 non-null  float64\n",
      " 7   Size              182502 non-null  float64\n",
      " 8   Last Updated      182502 non-null  object \n",
      " 9   Content Rating    182502 non-null  object \n",
      " 10  Ad Supported      182502 non-null  bool   \n",
      " 11  In App Purchases  182502 non-null  bool   \n",
      " 12  Editors Choice    182502 non-null  bool   \n",
      " 13  Success           182502 non-null  bool   \n",
      "dtypes: bool(5), float64(3), int64(1), object(5)\n",
      "memory usage: 13.4+ MB\n"
     ]
    }
   ],
   "source": [
    "googleplayclean.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9abc8c0d",
   "metadata": {},
   "source": [
    "# Using a Logistic Regression Model for All Categories\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "b9b28b55",
   "metadata": {},
   "outputs": [],
   "source": [
    "cat_vars=['Free', 'Size', 'Last Updated', 'Content Rating', 'Ad Supported', 'In App Purchases', 'Editors Choice']\n",
    "for var in cat_vars:\n",
    "    cat_list = 'var'+'_'+var\n",
    "    cat_list = pd.get_dummies(googleplayclean[var], prefix=var)\n",
    "    data1 = googleplayclean.join(cat_list)\n",
    "    googleplayclean = data1\n",
    "cat_vars=['Free', 'Size', 'Last Updated', 'Content Rating', 'Ad Supported', 'In App Purchases', 'Editors Choice']\n",
    "data_vars = googleplayclean.columns.values.tolist()\n",
    "to_keep = [i for i in data_vars if i not in cat_vars]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "7d3815da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False    168140\n",
      "True      14362\n",
      "Name: Success, dtype: int64\n",
      "False    0.921305\n",
      "True     0.078695\n",
      "Name: Success, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(googleplayclean['Success'].value_counts())\n",
    "print(googleplayclean.Success.value_counts() / len(googleplayclean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "1b16f8a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# dependent variable\n",
    "y = googleplayclean[['Success']]\n",
    "# independent variables\n",
    "# x = googleplayclean.drop(columns = ['Success', 'Category', 'Rating', 'Installs', 'Last Updated', 'Content Rating'])\n",
    "x = googleplayclean[['Free', 'Price', 'Ad Supported', 'In App Purchases', 'Editors Choice']]\n",
    "# not using size, as the numbers are too similar when compared with size\n",
    "os = SMOTE(random_state = 0)\n",
    "x_train, x_test, y_train, y_test = sk.train_test_split(x, y, test_size = 0.2, random_state=0)\n",
    "columns = x_train.columns\n",
    "\n",
    "smote_data_x, smote_data_y = os.fit_resample(x_train, y_train)\n",
    "smote_data_x = pd.DataFrame(data = smote_data_x, columns = columns)\n",
    "smote_data_y = pd.DataFrame(data = smote_data_y, columns = ['Success'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "d6b282e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Free</th>\n",
       "      <th>Price</th>\n",
       "      <th>Ad Supported</th>\n",
       "      <th>In App Purchases</th>\n",
       "      <th>Editors Choice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269141</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269142</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269143</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269144</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269145</th>\n",
       "      <td>True</td>\n",
       "      <td>0.0</td>\n",
       "      <td>True</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>269146 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Free  Price  Ad Supported  In App Purchases  Editors Choice\n",
       "0       True    0.0          True             False           False\n",
       "1       True    0.0         False             False           False\n",
       "2       True    0.0          True             False           False\n",
       "3       True    0.0          True             False           False\n",
       "4       True    0.0          True             False           False\n",
       "...      ...    ...           ...               ...             ...\n",
       "269141  True    0.0          True              True           False\n",
       "269142  True    0.0          True              True           False\n",
       "269143  True    0.0          True             False           False\n",
       "269144  True    0.0          True              True           False\n",
       "269145  True    0.0          True              True           False\n",
       "\n",
       "[269146 rows x 5 columns]"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smote_data_x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "692c89de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Success</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269141</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269142</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269143</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269144</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>269145</th>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>269146 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Success\n",
       "0         False\n",
       "1         False\n",
       "2         False\n",
       "3         False\n",
       "4         False\n",
       "...         ...\n",
       "269141     True\n",
       "269142     True\n",
       "269143     True\n",
       "269144     True\n",
       "269145     True\n",
       "\n",
       "[269146 rows x 1 columns]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smote_data_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "dd5e45e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "% of each class in the original dataset -\n",
      "False    0.921305\n",
      "True     0.078695\n",
      "Name: Success, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print( \"% of each class in the original dataset -\")\n",
    "print(googleplayclean.Success.value_counts() / len(googleplayclean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "098ca8bc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "% of each class in SMOTE sampled dataset -\n",
      "False    0.737378\n",
      "True     0.737378\n",
      "Name: Success, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print ( \"% of each class in SMOTE sampled dataset -\")\n",
    "print (smote_data_y.Success.value_counts() / len(googleplayclean))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "6c0063e7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.9229213926422725\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>feature</th>\n",
       "      <th>importance</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Editors Choice</td>\n",
       "      <td>43.450257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>In App Purchases</td>\n",
       "      <td>5.267861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Ad Supported</td>\n",
       "      <td>1.897287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Free</td>\n",
       "      <td>1.842638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Price</td>\n",
       "      <td>0.941514</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            feature  importance\n",
       "4    Editors Choice   43.450257\n",
       "3  In App Purchases    5.267861\n",
       "2      Ad Supported    1.897287\n",
       "0              Free    1.842638\n",
       "1             Price    0.941514"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# make a list of all independent features\n",
    "feature_names = smote_data_x.columns.to_list()\n",
    "model = LogisticRegression(random_state=0).fit(googleplayclean[feature_names].values, googleplayclean[\"Success\"].values)\n",
    "# get the scores\n",
    "score = model.score(googleplayclean[feature_names].values, googleplayclean['Success'].values)\n",
    "print(score)\n",
    "w0 = model.intercept_[0]\n",
    "w = model.coef_[0]\n",
    "\n",
    "# important features\n",
    "feature_importance = pd.DataFrame(feature_names, columns = [\"feature\"])\n",
    "feature_importance[\"importance\"] = pow(math.e, w)\n",
    "feature_importance = feature_importance.sort_values(by = [\"importance\"], ascending = False)\n",
    "feature_importance = feature_importance[:10].sort_values(by = [\"importance\"], ascending = False)\n",
    "\n",
    "# Visualisation\n",
    "ax = feature_importance.sort_values(by = [\"importance\"], ascending=True).plot.barh(x = 'feature', y = 'importance')\n",
    "\n",
    "plt.title('Important Features')\n",
    "plt.show()\n",
    "\n",
    "# Important Features\n",
    "feature_importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "be27c5d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# make a list of all features\n",
    "feature_importance_list = feature_importance['feature'].to_list()\n",
    "\n",
    "# create the X with all important features only\n",
    "x = smote_data_x[feature_importance_list]\n",
    "y = smote_data_y['Success']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "a1849461",
   "metadata": {},
   "outputs": [],
   "source": [
    "x = pd.get_dummies(x, columns=['Free', 'Ad Supported', 'In App Purchases', 'Editors Choice'], drop_first=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "95fa9d86",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.597185\n",
      "         Iterations 9\n",
      "                            Results: Logit\n",
      "======================================================================\n",
      "Model:                Logit             Pseudo R-squared:  0.138      \n",
      "Dependent Variable:   Success           AIC:               257176.7601\n",
      "Date:                 2022-04-14 01:01  BIC:               257228.1594\n",
      "No. Observations:     215316            Log-Likelihood:    -1.2858e+05\n",
      "Df Model:             4                 LL-Null:           -1.4925e+05\n",
      "Df Residuals:         215311            LLR p-value:       0.0000     \n",
      "Converged:            1.0000            Scale:             1.0000     \n",
      "No. Iterations:       9.0000                                          \n",
      "----------------------------------------------------------------------\n",
      "                       Coef.  Std.Err.    z     P>|z|   [0.025  0.975]\n",
      "----------------------------------------------------------------------\n",
      "Price                 -0.6911   0.0178 -38.8946 0.0000 -0.7260 -0.6563\n",
      "Free_True             -1.4507   0.0151 -96.0740 0.0000 -1.4803 -1.4211\n",
      "Ad Supported_True      0.7389   0.0152  48.7218 0.0000  0.7091  0.7686\n",
      "In App Purchases_True  1.6589   0.0095 173.9253 0.0000  1.6402  1.6775\n",
      "Editors Choice_True    4.2439   0.1758  24.1461 0.0000  3.8994  4.5884\n",
      "======================================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Split the dataset to test and train data\n",
    "x_train, x_test, y_train, y_test = sk.train_test_split(x, y, test_size=0.2, random_state=0)\n",
    "logit_model=sm.Logit(y_train,x_train)\n",
    "result = logit_model.fit()\n",
    "print(result.summary2())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "e9d4f7cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Model Accuracy: 0.71\n"
     ]
    }
   ],
   "source": [
    "logreg = LogisticRegression()\n",
    "logreg.fit(x_train, y_train)\n",
    "y_pred = logreg.predict(x_test)\n",
    "print('Logistic Regression Model Accuracy: {:.2f}'.format(logreg.score(x_test,y_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "488f7b56",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "logit_roc_auc = roc_auc_score(y_test, logreg.predict(x_test))\n",
    "fpr, tpr, thresholds = roc_curve(y_test, logreg.predict_proba(x_test)[:,1])\n",
    "plt.figure()\n",
    "plt.plot(fpr, tpr, label='Logistric Regression (area = %0.2f)' % logit_roc_auc)\n",
    "plt.plot([0,1], [0,1], 'r--')\n",
    "plt.xlim([0.0, 1.0])\n",
    "plt.ylim([0.0, 1.05])\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.title('Receiver Operating Characteristic')\n",
    "plt.legend(loc = \"lower right\")\n",
    "plt.savefig('Log_ROC')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "95a5152c",
   "metadata": {},
   "source": [
    "# Logistic Regression for Puzzle Games\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "62f2cb4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "puzzle = googleplayclean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "0a2d18e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "puzzle_0 = ['Puzzle']\n",
    "puzzleNotExist = ~puzzle['Category'].isin(puzzle_0)\n",
    "puzzleNotExist_rows = puzzle[puzzleNotExist]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "8d8387ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "puzzle = puzzle.drop(puzzleNotExist_rows.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f57725c4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
